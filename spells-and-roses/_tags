# OASIS_START
# DO NOT EDIT (digest: 771e53dfe8e010c92c5fc4c297af221c)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library linear
"linear/linear.cmxs": use_linear
"linear/std.cmx": for-pack(Linear)
<linear/*.ml{,i}>: package(bin_prot)
<linear/*.ml{,i}>: package(bin_prot.syntax)
<linear/*.ml{,i}>: package(comparelib)
<linear/*.ml{,i}>: package(comparelib.syntax)
<linear/*.ml{,i}>: package(core)
<linear/*.ml{,i}>: package(fieldslib)
<linear/*.ml{,i}>: package(fieldslib.syntax)
<linear/*.ml{,i}>: package(herelib)
<linear/*.ml{,i}>: package(herelib.syntax)
<linear/*.ml{,i}>: package(sexplib)
<linear/*.ml{,i}>: package(sexplib.syntax)
<linear/*.ml{,i}>: package(threads)
# Library lib
"lib/lib.cmxs": use_lib
<lib/*.ml{,i}>: package(async)
<lib/*.ml{,i}>: package(bin_prot)
<lib/*.ml{,i}>: package(bin_prot.syntax)
<lib/*.ml{,i}>: package(comparelib)
<lib/*.ml{,i}>: package(comparelib.syntax)
<lib/*.ml{,i}>: package(core)
<lib/*.ml{,i}>: package(fieldslib)
<lib/*.ml{,i}>: package(fieldslib.syntax)
<lib/*.ml{,i}>: package(herelib)
<lib/*.ml{,i}>: package(herelib.syntax)
<lib/*.ml{,i}>: package(ocaml_plugin)
<lib/*.ml{,i}>: package(sdl2)
<lib/*.ml{,i}>: package(sdl2_img)
<lib/*.ml{,i}>: package(sdl2_ttf)
<lib/*.ml{,i}>: package(sexplib)
<lib/*.ml{,i}>: package(sexplib.syntax)
<lib/*.ml{,i}>: package(threads)
# Library renderer
"renderer/renderer.cmxs": use_renderer
<renderer/*.ml{,i}>: package(comparelib)
<renderer/*.ml{,i}>: package(comparelib.syntax)
<renderer/*.ml{,i}>: package(core)
<renderer/*.ml{,i}>: package(fieldslib)
<renderer/*.ml{,i}>: package(fieldslib.syntax)
<renderer/*.ml{,i}>: package(herelib)
<renderer/*.ml{,i}>: package(herelib.syntax)
<renderer/*.ml{,i}>: package(sexplib)
<renderer/*.ml{,i}>: package(sexplib.syntax)
<renderer/*.ml{,i}>: package(threads)
# Library spells_and_roses
"spells_and_roses/spells_and_roses.cmxs": use_spells_and_roses
<spells_and_roses/*.ml{,i}>: package(async)
<spells_and_roses/*.ml{,i}>: package(bin_prot)
<spells_and_roses/*.ml{,i}>: package(bin_prot.syntax)
<spells_and_roses/*.ml{,i}>: package(comparelib)
<spells_and_roses/*.ml{,i}>: package(comparelib.syntax)
<spells_and_roses/*.ml{,i}>: package(core)
<spells_and_roses/*.ml{,i}>: package(fieldslib)
<spells_and_roses/*.ml{,i}>: package(fieldslib.syntax)
<spells_and_roses/*.ml{,i}>: package(herelib)
<spells_and_roses/*.ml{,i}>: package(herelib.syntax)
<spells_and_roses/*.ml{,i}>: package(ocaml_plugin)
<spells_and_roses/*.ml{,i}>: package(sdl2)
<spells_and_roses/*.ml{,i}>: package(sdl2_img)
<spells_and_roses/*.ml{,i}>: package(sdl2_ttf)
<spells_and_roses/*.ml{,i}>: package(sexplib)
<spells_and_roses/*.ml{,i}>: package(sexplib.syntax)
<spells_and_roses/*.ml{,i}>: package(threads)
<spells_and_roses/*.ml{,i}>: use_lib
# Library pong
"pong/pong.cmxs": use_pong
<pong/*.ml{,i}>: package(async)
<pong/*.ml{,i}>: package(bin_prot)
<pong/*.ml{,i}>: package(bin_prot.syntax)
<pong/*.ml{,i}>: package(comparelib)
<pong/*.ml{,i}>: package(comparelib.syntax)
<pong/*.ml{,i}>: package(core)
<pong/*.ml{,i}>: package(fieldslib)
<pong/*.ml{,i}>: package(fieldslib.syntax)
<pong/*.ml{,i}>: package(herelib)
<pong/*.ml{,i}>: package(herelib.syntax)
<pong/*.ml{,i}>: package(ocaml_plugin)
<pong/*.ml{,i}>: package(sdl2)
<pong/*.ml{,i}>: package(sdl2_img)
<pong/*.ml{,i}>: package(sdl2_ttf)
<pong/*.ml{,i}>: package(sexplib)
<pong/*.ml{,i}>: package(sexplib.syntax)
<pong/*.ml{,i}>: package(threads)
<pong/*.ml{,i}>: use_lib
# Library ocaml_plugin_archive
"plugin/ocaml_plugin_archive.cmxs": use_ocaml_plugin_archive
<plugin/ocaml_plugin_archive.{cma,cmxa}>: use_libocaml_plugin_archive_stubs
<plugin/*.ml{,i}>: package(bin_prot)
<plugin/*.ml{,i}>: package(ocaml_plugin)
<plugin/*.ml{,i}>: package(sexplib)
<plugin/*.ml{,i}>: package(threads)
<plugin/*.ml{,i}>: package(type_conv)
"plugin/ocaml_archive.c": package(bin_prot)
"plugin/ocaml_archive.c": package(ocaml_plugin)
"plugin/ocaml_archive.c": package(sexplib)
"plugin/ocaml_archive.c": package(threads)
"plugin/ocaml_archive.c": package(type_conv)
# Executable super_max
<bin/super_max.{native,byte}>: package(async)
<bin/super_max.{native,byte}>: package(bin_prot)
<bin/super_max.{native,byte}>: package(bin_prot.syntax)
<bin/super_max.{native,byte}>: package(comparelib)
<bin/super_max.{native,byte}>: package(comparelib.syntax)
<bin/super_max.{native,byte}>: package(core)
<bin/super_max.{native,byte}>: package(fieldslib)
<bin/super_max.{native,byte}>: package(fieldslib.syntax)
<bin/super_max.{native,byte}>: package(herelib)
<bin/super_max.{native,byte}>: package(herelib.syntax)
<bin/super_max.{native,byte}>: package(ocaml_plugin)
<bin/super_max.{native,byte}>: package(sdl2)
<bin/super_max.{native,byte}>: package(sdl2_img)
<bin/super_max.{native,byte}>: package(sdl2_ttf)
<bin/super_max.{native,byte}>: package(sexplib)
<bin/super_max.{native,byte}>: package(sexplib.syntax)
<bin/super_max.{native,byte}>: package(threads)
<bin/super_max.{native,byte}>: package(type_conv)
<bin/super_max.{native,byte}>: use_lib
<bin/super_max.{native,byte}>: use_linear
<bin/super_max.{native,byte}>: use_ocaml_plugin_archive
<bin/super_max.{native,byte}>: use_pong
<bin/super_max.{native,byte}>: use_renderer
<bin/super_max.{native,byte}>: use_spells_and_roses
<bin/*.ml{,i}>: package(async)
<bin/*.ml{,i}>: package(bin_prot)
<bin/*.ml{,i}>: package(bin_prot.syntax)
<bin/*.ml{,i}>: package(comparelib)
<bin/*.ml{,i}>: package(comparelib.syntax)
<bin/*.ml{,i}>: package(core)
<bin/*.ml{,i}>: package(fieldslib)
<bin/*.ml{,i}>: package(fieldslib.syntax)
<bin/*.ml{,i}>: package(herelib)
<bin/*.ml{,i}>: package(herelib.syntax)
<bin/*.ml{,i}>: package(ocaml_plugin)
<bin/*.ml{,i}>: package(sdl2)
<bin/*.ml{,i}>: package(sdl2_img)
<bin/*.ml{,i}>: package(sdl2_ttf)
<bin/*.ml{,i}>: package(sexplib)
<bin/*.ml{,i}>: package(sexplib.syntax)
<bin/*.ml{,i}>: package(threads)
<bin/*.ml{,i}>: package(type_conv)
<bin/*.ml{,i}>: use_lib
<bin/*.ml{,i}>: use_linear
<bin/*.ml{,i}>: use_ocaml_plugin_archive
<bin/*.ml{,i}>: use_pong
<bin/*.ml{,i}>: use_renderer
<bin/*.ml{,i}>: use_spells_and_roses
# OASIS_STOP
<{bin,lib,plugin,spells_and_roses,pong,renderer,linear}/*.ml{,i}>: syntax_camlp4o
