#!/bin/bash

set -e -u -o pipefail

exe="$1"
shift

function indent {
    while read -r line; do
        echo "  $line"
    done
}

modules_linked_in="$(readelf -sW "$exe" | awk '{print $8}' | (grep '^caml[A-Z]' || true) | sed -e 's/__.*$//' -e 's/^caml//' | sort -u)"

if [ $# -eq 0 ]; then
    echo "$modules_linked_in"
else
    # Assumes no toplevel compilation unit contains "__" (don't care about modules that
    # get packed, they aren't toplevel). We could probably change the check slighly to
    # avoid making these assumptions by looking for symbols like caml$Library.
    # Will need to be updated when we stop packing libraries to make sure every module in
    # a library is linked in, and every library added implicitely by the interface mechanism
    # is linked in too.
    needed_modules="$(echo "$@" | tr ' ' '\n' | sort -u)"
    missing_modules=$(comm -23 <(echo "$needed_modules") <(echo "$modules_linked_in"))
    if [ "$missing_modules" ]; then
        echo $exe embeds the interface of libraries \(for ocaml_plugin\)
        echo that are not linked in the executable. Trying to load plugins that
        echo use these problematic libraries will fail at runtime:
        echo "$missing_modules" | indent
        echo You may want to force them to be linked in your executable by referring
        echo to them. Making a module alias is NOT good enough and will break with
        echo ocaml 4.02.
        exit 2
    fi
fi
